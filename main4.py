import pandas as pd
import streamlit as st
from datetime import datetime
from copy import deepcopy
from openai import OpenAI
import csv
import re
import pytz
import json
import logging
from word2number import w2n  # Importaci√≥n necesaria para convertir palabras a n√∫meros
import unicodedata

# Configura el logger
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')

# Inicializar el cliente de OpenAI con la clave API
client = OpenAI(api_key=st.secrets["OPENAI_API_KEY"])

# Configuraci√≥n inicial de la p√°gina
st.set_page_config(page_title="Saz√≥nBot", page_icon=":pot_of_food:")
st.title("üç≤ Saz√≥nBot")

# Mensaje de bienvenida
intro = """¬°Bienvenido a Saz√≥n Bot, el lugar donde todos tus antojos de almuerzo se hacen realidad!
Comienza a chatear con Saz√≥n Bot y descubre qu√© puedes pedir, cu√°nto cuesta y c√≥mo realizar tu pago. ¬°Estamos aqu√≠ para ayudarte a disfrutar del mejor almuerzo!"""
st.markdown(intro)

# Cargar el men√∫ desde un archivo CSV
def load(file_path):
    """Cargar el men√∫ desde un archivo CSV con columnas Plato, Descripci√≥n y Precio."""
    data = pd.read_csv(file_path)
    return data

def format_menu(menu):
    if menu.empty:
        return "No hay platos disponibles."
    else:
        # Encabezados de la tabla
        table = "| *Plato* | *Descripci√≥n* | *Precio* |\n"
        table += "|-----------|-----------------|-------------|\n"  # L√≠nea de separaci√≥n
        
        # Filas de la tabla
        for idx, row in menu.iterrows():
            table += f"| {row['Plato']} | {row['Descripci√≥n']} | S/{row['Precio']:.2f} |\n"
        
        return table

# Mostrar el men√∫ con descripciones
def display_menu(menu):
    """Mostrar el men√∫ con descripciones."""
    menu_text = "Aqu√≠ est√° nuestra carta:\n"
    for index, row in menu.iterrows():
        menu_text += f"{row['Plato']}: {row['Descripci√≥n']} - {row['Precio']} soles\n"
    return menu_text

# Mostrar los distritos de reparto
def display_distritos(distritos):
    """Mostrar los distritos de reparto disponibles."""
    distritos_text = "Los distritos de reparto son:\n"
    for index, row in distritos.iterrows():
        distritos_text += f"*{row['Distrito']}*\n"
    return distritos_text

def display_postre(postre):
    """Mostrar el men√∫ con descripciones."""
    postre_text = "Aqu√≠ est√° lista de postres:\n"
    for index, row in postre.iterrows():
        postre_text += f"{row['Postres']}: {row['Descripci√≥n']} - {row['Precio']} soles\n"
    return postre_text

def display_bebida(bebida):
    """Mostrar el men√∫ con descripciones."""
    bebida_text = "Aqu√≠ est√° lista de bebidas:\n"
    for index, row in bebida.iterrows():
        bebida_text += f"{row['bebida']}: {row['descripcion']} - {row['precio']} soles\n"
    return bebida_text

# Cargar el men√∫ y distritos
menu = load("carta.csv")
distritos = load("distritos.csv")
bebidas = load("Bebidas.csv")
postres = load("Postres.csv")

# Obtener todos los nombres de productos
menu_items = menu['Plato'].tolist()
bebida_items = bebidas['bebida'].tolist()
postre_items = postres['Postres'].tolist()

# Combinar todos los √≠tems
all_menu_items = menu_items + bebida_items + postre_items

def display_confirmed_order(order_details):
    """Genera una tabla en formato Markdown para el pedido confirmado."""
    table = "| *Plato* | *Cantidad* | *Precio Total* |\n"
    table += "|-----------|--------------|------------------|\n"
    for item in order_details:
        table += f"| {item['Plato']} | {item['Cantidad']} | S/{item['Precio Total']:.2f} |\n"
    table += "| *Total* |              | *S/ {:.2f}*      |\n".format(sum(item['Precio Total'] for item in order_details))
    return table

def normalize_text(text):
    """Elimina acentos y convierte a min√∫sculas."""
    text = text.lower()
    text = ''.join(
        c for c in unicodedata.normalize('NFD', text)
        if unicodedata.category(c) != 'Mn'
    )
    return text

def get_system_prompt(menu, distritos):
    """Define el prompt del sistema para el bot de Saz√≥n incluyendo el men√∫ y distritos."""
    lima_tz = pytz.timezone('America/Lima')  # Define la zona horaria de Lima
    hora_lima = datetime.now(lima_tz).strftime("%Y-%m-%d %H:%M:%S")  # Obtiene la hora actual en Lima
    system_prompt = f"""
    Eres el bot de pedidos de Saz√≥n, amable y servicial. Ayudas a los clientes a hacer sus pedidos y siempre confirmas que solo pidan platos que est√°n en el men√∫ oficial. Aqu√≠ tienes el men√∫ para mostr√°rselo a los clientes:\n{display_menu(menu)}\n
    Tambi√©n repartimos en los siguientes distritos: {display_distritos(distritos)}.\n
    Primero, saluda al cliente y ofr√©cele el men√∫. Aseg√∫rate de que el cliente solo seleccione platos que est√°n en el men√∫ actual y expl√≠cales que no podemos preparar platos fuera del men√∫.

    *Interpretaci√≥n de cantidades:*
    - El cliente puede indicar la cantidad en texto o en n√∫meros.
    - Convierte cualquier cantidad escrita en palabras a su valor num√©rico antes de procesarla (por ejemplo, "diecis√©is" a 16, "cincuenta" a 50).

    *IMPORTANTE: Validaci√≥n de cantidad solicitada*
    - Si la cantidad solicitada est√° en el rango de 1 a 100 (inclusive), acepta el pedido sin mostrar advertencias.
    - Si la cantidad solicitada es mayor que 100, muestra el siguiente mensaje:
      "Lamento informarte que el l√≠mite m√°ximo de cantidad por producto es de 100 unidades. Por favor, reduce la cantidad para procesar tu pedido."

    - Si el usuario solicita m√∫ltiples productos en un solo mensaje, procesa cada uno de ellos siguiendo las mismas reglas.

    Si el cliente solicita un producto que no est√° en el men√∫, inf√≥rmale amablemente que no lo tenemos disponible y sugi√©rele elegir otro plato del men√∫.

    Pregunta si desea recoger su pedido en el local o si prefiere entrega a domicilio. 
    Si elige entrega, preg√∫ntale al cliente a qu√© distrito desea que se le env√≠e su pedido, confirma que el distrito est√© dentro de las zonas de reparto y verifica el distrito de entrega con el cliente.
    Si el pedido es para recoger, inv√≠talo a acercarse a nuestro local ubicado en UPCH123.

    Usa solo espa√±ol peruano en tus respuestas, evitando palabras como "prefer√≠s" y empleando "prefiere" en su lugar.

    Antes de continuar, confirma que el cliente haya ingresado un m√©todo de entrega v√°lido. Luego, resume el pedido en la siguiente tabla:\n
    | *Plato*      | *Cantidad* | *Precio Total* |\n
    |----------------|--------------|------------------|\n
    |                |              |                  |\n
    | *Total*      |              | *S/ 0.00*      |\n

    Aclara que el monto total del pedido no acepta descuentos ni ajustes de precio.

    Pregunta al cliente si quiere a√±adir una bebida o postre. 
    - Si responde bebida, mu√©strale √∫nicamente la carta de bebidas {display_bebida(bebidas)}.
    - Si responde postre, mu√©strale solo la carta de postres {display_postre(postres)}.

    Si el cliente agrega postres o bebidas, incorp√≥ralos en la tabla de resumen como un plato adicional y calcula el monto total nuevamente con precisi√≥n.

    Al final, preg√∫ntale al cliente: "¬øEst√°s de acuerdo con el pedido?" y espera su confirmaci√≥n. 

    Luego de confirmar, pide el m√©todo de pago (tarjeta de cr√©dito, efectivo u otra opci√≥n disponible). Verifica que haya ingresado un m√©todo de pago antes de continuar.

    Una vez que el cliente confirme el m√©todo de pago, registra la hora actual de Per√∫ como el timestamp {hora_lima} de la confirmaci√≥n. 
    El pedido confirmado ser√°:\n
    {display_confirmed_order([{'Plato': '', 'Cantidad': 0, 'Precio Total': 0}])}\n

    Recuerda siempre confirmar que el pedido, el m√©todo de pago y el lugar de entrega est√©n completos y correctos antes de registrarlo.
    """
    return system_prompt.replace("\n", " ")

def extract_order_json(response):
    # ... (sin cambios)
    pass  # Mant√©n la implementaci√≥n existente

def generate_response(prompt, temperature=0.5, max_tokens=1000):
    # ... (sin cambios)
    pass  # Mant√©n la implementaci√≥n existente

def extract_quantities_and_items(user_input, menu_items):
    user_input = user_input.lower()
    pattern = r'(\d+|\w+)\s+([a-z√°√©√≠√≥√∫√±]+(?:\s+[a-z√°√©√≠√≥√∫√±]+)*)'
    matches = re.findall(pattern, user_input)
    
    quantities = []
    items = []
    
    for quantity_str, item in matches:
        item = item.strip()
        item_normalized = normalize_text(item)
        try:
            # Intentar convertir la cantidad a n√∫mero
            quantity = int(quantity_str)
        except ValueError:
            try:
                quantity = w2n.word_to_num(quantity_str)
            except ValueError:
                quantity = None
        if quantity is not None and item != '':
            # Verificar si el producto est√° en el men√∫
            item_in_menu = False
            for menu_item in menu_items:
                menu_item_normalized = normalize_text(menu_item)
                if menu_item_normalized in item_normalized or item_normalized in menu_item_normalized:
                    item_in_menu = True
                    item = menu_item  # Usar el nombre oficial del men√∫
                    break
            if item_in_menu:
                quantities.append(quantity)
                items.append(item)
            else:
                # Producto no encontrado en el men√∫
                pass  # Podr√≠as manejar productos no encontrados si lo deseas
    return quantities, items

initial_state = [
    {"role": "system", "content": get_system_prompt(menu, distritos)},
    {
        "role": "assistant",
        "content": f"¬øQu√© te puedo ofrecer?\n\nEste es el men√∫ del d√≠a:\n\n{format_menu(menu)}",
    },
]

if "messages" not in st.session_state:
    st.session_state["messages"] = deepcopy(initial_state)

# Bot√≥n para eliminar conversaci√≥n
clear_button = st.button("Eliminar conversaci√≥n", key="clear")
if clear_button:
    st.session_state["messages"] = deepcopy(initial_state)

# Mostrar mensajes del historial
for message in st.session_state.messages:
    if message["role"] == "system":
        continue
    elif message["role"] == "assistant":
        with st.chat_message(message["role"], avatar="üë®‚Äçüç≥"):
            st.markdown(message["content"])
    else:
        with st.chat_message(message["role"], avatar="üë§"):
            st.markdown(message["content"])

if prompt := st.chat_input():
    # Extraer cantidades e √≠tems
    quantities, items = extract_quantities_and_items(prompt, all_menu_items)
    invalid_items = []
    for qty in quantities:
        if qty > 100:
            invalid_items.append(qty)
    
    if invalid_items:
        with st.chat_message("assistant", avatar="üë®‚Äçüç≥"):
            st.markdown(
                "Lamento informarte que el l√≠mite m√°ximo de cantidad por producto es de 100 unidades. Por favor, reduce la cantidad para procesar tu pedido."
            )
    elif not items:
        with st.chat_message("assistant", avatar="üë®‚Äçüç≥"):
            st.markdown(
                "Lo siento, algunos de los productos que solicitaste no est√°n en nuestro men√∫. Por favor, revisa el men√∫ y vuelve a intentarlo."
            )
    else:
        with st.chat_message("user", avatar="üë§"):
            st.markdown(prompt)
        output = generate_response(prompt)
        with st.chat_message("assistant", avatar="üë®‚Äçüç≥"):
            st.markdown(output)
